apiVersion: v1
kind: Template
labels:
  template: spring-app-template
metadata:
  annotations:
    description: spring-app-template
  name: spring-app-template
objects:
- apiVersion: v1
  kind: ConfigMap
  labels:
    app: ${APP_NAME}
  metadata:
    name: ${OCP_OBJECT_NAME}
  data:
    bootstrap.properties: |-
      ## =========================================================
      ##              Service
      ## =========================================================
      spring.application.name=${APP_NAME}
      spring.profiles.active=${APP_PROFILE}
      
      
      ## =========================================================
      ##              Config Server
      ## =========================================================
      spring.cloud.config.uri=${CONFIG_SERVER_URI}
      spring.cloud.config.fail-fast=true
      spring.cloud.config.label=${CONFIGS_BRANCH}
      
      ## Disable config health check
      health.config.enabled=false
      
      ## Cache health check response for 1 hour (in milliseconds)
      #health.config.time-to-live=3600000
      
    logback.xml: |-
      <?xml version="1.0" encoding="UTF-8"?>
      <configuration scan="true">
      
          <!-- use Spring defaults console and file -->
          <include resource="org/springframework/boot/logging/logback/base.xml" />
      
          <!-- Splunk config -->
          <springProperty scope="context" name="splunk-url" source="splunk.hec.url"/>
          <springProperty scope="context" name="splunk-token" source="splunk.hec.token"/>
          <springProperty scope="context" name="application-name" source="spring.application.name"/>
      
          <appender name="splunk" class="com.splunk.logging.HttpEventCollectorLogbackAppender">
              <url>${splunk-url}</url>
              <token>${splunk-token}</token>
              <source>${application-name}</source>
              <host>${HOSTNAME}</host>
              <disableCertificateValidation>true</disableCertificateValidation>
              <layout class="ch.qos.logback.classic.PatternLayout">
                  <!--<pattern>${CONSOLE_LOG_PATTERN}</pattern> -->
                  <pattern>%msg</pattern>
              </layout>
          </appender>
      
          <root level="INFO">
              <appender-ref ref="splunk"/>
          </root>
      
      </configuration>

- apiVersion: v1
  kind: Route
  labels:
    app: ${APP_NAME}
  metadata:
    name: ${OCP_OBJECT_NAME}
    annotations:
      haproxy.router.openshift.io/disable_cookies: 'true'
  spec:
    port:
      targetPort: http
    to:
      kind: Service
      name: ${OCP_OBJECT_NAME}

- apiVersion: v1
  kind: Route
  labels:
    app: ${APP_NAME}
  metadata:
    name: ${OCP_OBJECT_NAME}-mgmt
    annotations:
      haproxy.router.openshift.io/disable_cookies: 'true'
  spec:
    port:
      targetPort: mgmt
    to:
      kind: Service
      name: ${OCP_OBJECT_NAME}
    path: /actuator
    
- apiVersion: v1
  kind: Service
  labels:
    app: ${APP_NAME}
  metadata:
    name: ${OCP_OBJECT_NAME}
  spec:
    ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: 8080
    - name: mgmt
      port: 8081
      protocol: TCP
      targetPort: 8081
    selector:
      name: ${OCP_OBJECT_NAME}
    sessionAffinity: None
    type: ClusterIP
    
- apiVersion: v1
  kind: DeploymentConfig
  labels:
    app: ${APP_NAME}
  metadata:
    name: ${OCP_OBJECT_NAME}
  spec:
    replicas: ${{REPLICAS}}
    selector:
      name: ${OCP_OBJECT_NAME}
    strategy:
      type: Rolling
    template:
      metadata:
        labels:
          name: ${OCP_OBJECT_NAME}
      spec:
        containers:
          - name: ${OCP_OBJECT_NAME}
            image: ${IMAGE_NAME}:${IMAGE_TAG}
            imagePullPolicy: Always
            env:
              - name: JAVA_OPTIONS
                value: "${JAVA_OPTIONS}"
              - name: NAMESPACE
                value: "${NAMESPACE}"
            capabilities: {}            
            ports:
              - containerPort: 8080
                name: "http"
                protocol: "TCP"
              - containerPort: 8081
                name: "mgmt"
                protocol: "TCP"
            livenessProbe:
              httpGet:
                path: "/actuator/health"
                port: 8081
              initialDelaySeconds: 180
            readinessProbe:
              httpGet:
                path: "/actuator/health"
                port: 8081
              initialDelaySeconds: 10
            resources:
              requests:
                cpu: ${{CPU_REQUEST}}
                memory: ${MEMORY_REQUEST}
              limits:
                cpu: ${{CPU_LIMIT}}
                memory: ${MEMORY_LIMIT}
            volumeMounts:
              - mountPath: /deployments/config
                name: iamp-service-config
          
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        volumes:
          - name: iamp-service-config
            configMap:
              name: ${OCP_OBJECT_NAME}

    triggers: []

parameters:
- name: APP_NAME
  displayName: Application Name
  required: true
- name: APP_VERSION
  displayName: Application version
  required: true
- name: NAMESPACE
  displayName: Namespace
  required: true
- name: APP_PROFILE
  displayName: Application profile
  required: true
- name: OCP_OBJECT_NAME
  displayName: OpenShift DC name
  required: true
- name: IMAGE_NAME
  displayName: Image name
  required: true
- name: IMAGE_TAG
  displayName: Image tag
  required: true
- name: REPLICAS
  displayName: Replicas  
  value: "1"
- name: MEMORY_REQUEST
  displayName: Memory Request
  description: Minimum amount of memory to reserve for the container.
  value: 300Mi
- name: MEMORY_LIMIT
  displayName: Memory Limit
  description: Maximum amount of memory the container can use.
  value: 1Gi
- name: CPU_REQUEST
  displayName: CPU Request
  description: Minimum amount of CPU to reserve for the container.
  value: 100m
- name: CPU_LIMIT
  displayName: CPU Limit
  description: Maximum amount of CPU the container can use.
  value: "1"
- name: JAVA_OPTIONS
  displayName: JVM Options
  value: "-XshowSettings:vm -Xms256m -Xmx900m"
  
## Config Server specific parameters
- name: CONFIG_SERVER_URI
  displayName: Config server uri
  value: "http://spring-config-server:8080"
- name: CONFIGS_BRANCH
  displayName: Config server label
  required: true